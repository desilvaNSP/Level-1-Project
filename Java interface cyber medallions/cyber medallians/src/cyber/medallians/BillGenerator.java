/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * BillGenerator.java
 *
 * Created on Aug 19, 2012, 11:17:17 AM
 */
package cyber.medallians;

import DBManage.DBManager;
import DBManage.DatabaseConnector;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import resources.ApplyTheme;

/**
 *
 * @author DELL
 */
public class BillGenerator extends javax.swing.JFrame {
    
    DefaultTableModel defaultTableModelbillgenarator;

    /** Creates new form BillGenerator */
    public BillGenerator() {
        initComponents();
        setLocationRelativeTo(null);
        defaultTableModelbillgenarator = (DefaultTableModel) jtbbillgenarator.getModel();
        runload();
    }
    public void runload(){
        try {
            int bilgeneRowCount= defaultTableModelbillgenarator.getRowCount();
                for(int i=0;i<bilgeneRowCount;i++){
                    defaultTableModelbillgenarator.removeRow(0);
                }
                ResultSet rsbill=null;
                 Connection connection=DatabaseConnector.makeConnection();
                 String sqlreading="select reading_id,RDstate from reading";
                 rsbill=DBManager.getData(connection, sqlreading);
                  while(rsbill.next()){
                        Object raw1[]={rsbill.getString("reading_id"),rsbill.getString("RDstate")};
                        defaultTableModelbillgenarator.addRow(raw1);
                    }
        } catch (SQLException ex) {
            Logger.getLogger(BillGenerator.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(BillGenerator.class.getName()).log(Level.SEVERE, null, ex);
        }
         
         
    
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLayeredPane1 = new javax.swing.JLayeredPane();
        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jtfRid = new javax.swing.JTextField();
        btGen = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtbbillgenarator = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLayeredPane1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18));
        jLabel1.setText("Bill Generator");
        jLabel1.setBounds(130, 10, 130, 22);
        jLayeredPane1.add(jLabel1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel2.setText("Reading ID");

        btGen.setText("Bill Genarator");
        btGen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btGenActionPerformed(evt);
            }
        });

        jButton1.setText("Main");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btGen, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(52, 52, 52))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(jtfRid, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(55, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(85, 85, 85)
                .addComponent(jLabel2)
                .addContainerGap(130, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addGap(11, 11, 11)
                .addComponent(jtfRid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 40, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(btGen, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20))
        );

        jPanel1.setBounds(40, 60, 270, 150);
        jLayeredPane1.add(jPanel1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jtbbillgenarator.setBackground(new java.awt.Color(204, 255, 255));
        jtbbillgenarator.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Reading ID", "Genarated Or Not"
            }
        ));
        jtbbillgenarator.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtbbillgenaratorMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jtbbillgenarator);

        jScrollPane1.setBounds(320, 10, 250, 220);
        jLayeredPane1.add(jScrollPane1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLayeredPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 577, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLayeredPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 235, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void btGenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btGenActionPerformed
    String RDID = null;
    String sqlGetReadList = "select * from  reading";
    ResultSet resultSet = null;
    String reading = null;
    String months = null;
    String meterID=null;

    try {
        Connection conn = DatabaseConnector.makeConnection();
        resultSet = DBManager.getData(conn, sqlGetReadList);
        while (resultSet.next()) {
            RDID = resultSet.getString("reading_id");
            System.out.print(RDID + " ");
            System.out.print(resultSet.getString("dates") + " ");
            System.out.print(resultSet.getString("times") + " ");

            reading = resultSet.getString("units");
            System.out.print(reading + " ");
            months = resultSet.getString("months");
            meterID=resultSet.getString("meter_ID") ;
            System.out.print(resultSet.getString("no_of_dates") + " ");
            System.out.print(months + " ");
            System.out.print(meterID+ " ");
            System.out.print(resultSet.getString("rdstate") + " \n");






            double rinD = Double.parseDouble(reading);
            double rdp[] = new double[6];
            double finalAmount = 0;
            if (rinD > 180) {
                rdp[0] = ((rinD % 180) * 36);
                double ServiceP = 315 + 315 + 315 + 90 + 60 + 30;
                double VeryP = (60 * 24) + (30 * 21) + (30 * 7.5) + (30 * 4.7) + (30 * 3);
                finalAmount = rdp[0] + ServiceP + VeryP;
            } else if (rinD > 120) {
                rdp[0] = ((rinD % 120) * 24);
                double ServiceP = 315 + 315 + 90 + 60 + 30;
                double VeryP = (30 * 21) + (30 * 7.5) + (30 * 4.7) + (30 * 3);
                finalAmount = rdp[0] + ServiceP + VeryP;
            } else if (rinD > 90) {
                rdp[0] = ((rinD % 90) * 21);
                double ServiceP = 315 + 90 + 60 + 30;
                double VeryP = (30 * 7.5) + (30 * 4.7) + (30 * 3);
                finalAmount = rdp[0] + ServiceP + VeryP;
            } else if (rinD > 60) {
                rdp[0] = ((rinD % 60) * 7.5);
                double ServiceP = 90 + 60 + 30;
                double VeryP = (30 * 4.7) + (30 * 3);
                finalAmount = rdp[0] + ServiceP + VeryP;
            } else if (rinD > 30) {
                rdp[0] = ((rinD % 30) * 4.7);
                double ServiceP = 60 + 30;
                double VeryP = (30 * 3);
                finalAmount = rdp[0] + ServiceP + VeryP;
            } else {
                rdp[0] = ((rinD % 300) * 3);
                double ServiceP = 30;
                finalAmount = rdp[0] + ServiceP;
            }

            /////////////////////Account ID auto Gen///////////////////////////////////////
            int nextAccountID = 0;
            ResultSet resultSet1 = null;
            Connection conn2 = null;
            try {
                conn2 = DatabaseConnector.makeConnection();
                String sqlForIDgen = "select account_id  from hastopay";
                resultSet1 = DBManager.getData(conn2, sqlForIDgen);
                while (resultSet1.next()) {
                    String accID = resultSet1.getString("Account_id");
                    String purified = accID.replace('H', '0').replace('A', '0').replace('I', '0').replace('D', '0');
                    System.out.println(purified);
                    int purifiedId = Integer.parseInt(purified);
                    System.out.println(purifiedId);
                    if (purifiedId > nextAccountID) {
                        nextAccountID = purifiedId;
                    }
                }

            } catch (SQLException ex) {
                Logger.getLogger(BillGenerator.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(BillGenerator.class.getName()).log(Level.SEVERE, null, ex);
            }
            nextAccountID += 1;
            System.out.println("GenID :" + nextAccountID);
            String autoGenId = "HAID00" + Integer.toString(nextAccountID);
            System.out.println("autoGenID :" + autoGenId);
            /////////////////////Account ID auto Gen///////////////////////////////////////

            /////////////////////OwnerIDGEN///////////////////////////////////////
            String autoGencId=null;
            ResultSet resultSet2 = null;
            Connection conn3 = null;
            try {
                conn3 = DatabaseConnector.makeConnection();
                String sqlForIDgen2 = "select m.meter_id,c.owner_id,name from meter m,consumer c where m.owner_id=c.owner_id  and m.meter_ID='"+meterID+"';";
                resultSet2 = DBManager.getData(conn2, sqlForIDgen2);
                while (resultSet2.next()) {
                    autoGencId=resultSet2.getString("owner_ID");
                }

            } catch (SQLException ex) {
                Logger.getLogger(BillGenerator.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(BillGenerator.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            //System.out.println("GenID :" + nextownerID);
            // autoGencId = "cid0" + Integer.toString(nextownerID);
            System.out.println("autoGencID :" + autoGencId);
            /////////////////////OwnerIDGEN///////////////////////////////////////


            /////////////////////Account No Gen///////////////////////////////////////
            int nextAccountNo = 0;
            ResultSet resultSet11 = null;
            Connection conn21 = null;
            try {
                conn21 = DatabaseConnector.makeConnection();
                String sqlForIDgen5 = "select account_no  from hastopay";
                resultSet11 = DBManager.getData(conn21, sqlForIDgen5);
                while (resultSet11.next()) {
                    String accID = resultSet11.getString("Account_no");
                    //String purified = accID.replace('H', '0').replace('A', '0').replace('I', '0').replace('D', '0');
                    //System.out.println(purified);
                    int purifiedId = Integer.parseInt(accID);
                    System.out.println(accID);
                    if (purifiedId > nextAccountNo) {
                        nextAccountNo = purifiedId;
                    }
                }

            } catch (SQLException ex) {
                Logger.getLogger(BillGenerator.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(BillGenerator.class.getName()).log(Level.SEVERE, null, ex);
            }
            nextAccountNo += 549673;
            System.out.println("GenID :" + nextAccountNo);
            String autoGenAccNo = Integer.toString(nextAccountNo);
            System.out.println("autoGenID :" + autoGenAccNo);
            /////////////////////Account No Gen///////////////////////////////////////








            System.out.println(finalAmount);
            String sqlForBillGenerate = "Insert into hastopay(account_id, months, amount, owner_id, account_no, readingID) values('" + autoGenId + "','" + months + "','" + finalAmount + "','" + autoGencId + "','" + autoGenAccNo + "','" + RDID + "')";
            String sqlforConfirmReading = "update reading set RDState='ok' where reading_id='" + RDID + "'";
            Connection conn33 = null;
            int resultOfGen = 0;
            int resultOfUpdate = 0;
            try {
                conn33 = DatabaseConnector.makeConnection();
                resultOfGen = DBManager.SendData(conn33, sqlForBillGenerate);
                if (resultOfGen > 0) {
                    JOptionPane.showMessageDialog(rootPane, "Bill Generated", "Gene", 1);
                    resultOfUpdate = DBManager.SendData(conn33, sqlforConfirmReading);
                    if (resultOfUpdate > 0) {
                        JOptionPane.showMessageDialog(rootPane, "Update Successful", "Update information", 1);
                    }
                }
            } catch (SQLException ex) {
                Logger.getLogger(BillGenerator.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(BillGenerator.class.getName()).log(Level.SEVERE, null, ex);
            }



            for (int i = 0; i < 5; i++) {
                // System.out.println(rdp[i]);
                // System.out.println(i);
            }
        }

    } catch (SQLException ex) {
        Logger.getLogger(BillGenerator.class.getName()).log(Level.SEVERE, null, ex);
    } catch (ClassNotFoundException ex) {
        Logger.getLogger(BillGenerator.class.getName()).log(Level.SEVERE, null, ex);
    }



}//GEN-LAST:event_btGenActionPerformed

private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
this.setVisible(false);
MainWindow mainWindow=new MainWindow();
//mainWindow.setVisible(true);
}//GEN-LAST:event_jButton1ActionPerformed

private void jtbbillgenaratorMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtbbillgenaratorMouseClicked
 int row = jtbbillgenarator.getSelectedRow();
 // System.out.println(row);
  String readingid =(String) defaultTableModelbillgenarator.getValueAt(row,0);
  String rdstate =(String) defaultTableModelbillgenarator.getValueAt(row,1);
  
  System.out.println(readingid);
  
  jtfRid.setText(readingid);
  
}//GEN-LAST:event_jtbbillgenaratorMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BillGenerator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BillGenerator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BillGenerator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BillGenerator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                ApplyTheme.Theme();
                new BillGenerator().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btGen;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jtbbillgenarator;
    private javax.swing.JTextField jtfRid;
    // End of variables declaration//GEN-END:variables
}
